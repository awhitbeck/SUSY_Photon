#define LostMuon_cxx
#include "LostMuon.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>
#include <vector>
#include <cstring>
#include <string>
#include <fstream>

using namespace std;

int main(int argc, char* argv[])
{

  if (argc < 2) {
    cerr << "Please give 3 arguments " << "runList " << " " << "outputFileName" << " " << "dataset" << endl;
    return -1;
  }
  const char *inputFileList = argv[1];
  const char *outFileName   = argv[2];
  const char *data          = argv[3];

  LostMuon ana(inputFileList, outFileName, data);
  cout << "dataset " << data << " " << endl;

  ana.EventLoop(data,inputFileList);

  return 0;
}

void LostMuon::EventLoop(const char *data,const char *inputFileList) {
  if (fChain == 0) return;

  Long64_t nentries = fChain->GetEntriesFast();
  cout << "nentries " << nentries << endl;
  cout << "Analyzing dataset " << data << " " << endl;

  string s_data=data;
  bool mcSample=true;
  if(s_data=="Data") mcSample=false;    
  Long64_t nbytes = 0, nb = 0;
  int decade = 0;
  
  int evtSurvived=0;
  //get 2d histogram========================================
  //  TFile *f_LP=new TFile("LstMu_CS_TTW_LostMu.root");
  TFile *f_LP=new TFile("LstMu_CS_TTW_LostMuHadTau.root");
  // TFile *f_LP=new TFile("LstMu_CS_TTW_HadTauOnly.root");
  TH2D *h2_LP;TH1D *h_LP;
  bool do_prediction=0;

  cout<<"Doing prediction from file |"<<f_LP->GetName()<<"|? "<<do_prediction<<endl;


  for (Long64_t jentry=0; jentry<nentries;jentry++) {

    // ==============print number of events done == == == == == == == =
    double progress = 10.0 * jentry / (1.0 * nentries);
    int k = int (progress);
    if (k > decade)
      cout << 10 * k << " %" <<endl;
    decade = k;
    // cout<<"j:"<<jentry<<" fcurrent:"<<fCurrent<<endl;
    // ===============read this entry == == == == == == == == == == == 
    Long64_t ientry = LoadTree(jentry);
    if (ientry < 0) break;
    nb = fChain->GetEntry(jentry);   nbytes += nb;
    wt=1.0;
    
    bool process=true;
    if(!(CSCTightHaloFilter==1 && HBHENoiseFilter==1 && HBHEIsoNoiseFilter==1 && eeBadScFilter==1 && EcalDeadCellTriggerPrimitiveFilter==1 && BadChargedCandidateFilter && BadPFMuonFilter && NVtx > 0)) continue;
    if(Electrons->size()>0) continue;//veto electrons for lost muon estimation
    if(Muons->size()>1) continue;//exactly one RECO muon or no muon(lost)
    //Trigger selections
    bool passHT600Photon90Trigger = false;//(ST>700 && bestPhoton.Pt()>100);
    bool passPhoton165HE10Trigger = false;//(bestPhoton.Pt()>180);
    for(int i=0;i<TriggerNames->size();i++){
      string trgName=(*TriggerNames)[i];
      trgName.pop_back();
      if( trgName=="HLT_Photon90_CaloIdL_PFHT600_v" && (*TriggerPass)[i]==1 ) passHT600Photon90Trigger = true;
      else if( trgName=="HLT_Photon165_HE10_v" && (*TriggerPass)[i]==1 ) passPhoton165HE10Trigger = true;
      // cout<<(*TriggerNames)[i]<<" "<<(*TriggerPass)[i]<<" "<<(*TriggerPrescales)[i]<<endl;
    }
    // cout<<"PhoHT: "<<passHT600Photon90Trigger<<" Pho: "<<passPhoton165HE10Trigger<<endl;
    // cout<<"--------------------------------------------------------------------------"<<endl;
    if(!(passPhoton165HE10Trigger || passHT600Photon90Trigger)) continue;

    //About photons
    TLorentzVector bestPhoton=getBestPhoton();
    if(bestPhoton.Pt() <= 100) continue;
    //bool eMatchedG=check_eMatchedtoGamma();
    bool bestPhoHasPxlSeed=true;
    if(bestPhotonIndxAmongPhotons>=0){
      if((*Photons_hasPixelSeed)[bestPhotonIndxAmongPhotons]<0.001) bestPhoHasPxlSeed=false;
    }
    if( bestPhoHasPxlSeed ) continue;

    double mt_mu=0,mt_pho=0;
    if(Muons->size()==1){
      mt_mu=sqrt(2*(*Muons)[0].Pt()*MET*(1-cos(DeltaPhi(METPhi,(*Muons)[0].Phi()))));
      if(mt_mu>100) continue;
      if( ((*Muons)[0].Pt() < 10) || abs((*Muons)[0].Eta()) > 2.4 ) continue;
    }
    if(Muons->size()==0){
      //      if(isoMuonTracks!=0 || isoElectronTracks!=0 || isoPionTracks!=0) continue;
      continue;
    }
    mt_pho=sqrt(2*bestPhoton.Pt()*MET*(1-cos(DeltaPhi(METPhi,bestPhoton.Phi()))));
 
    //calulate ST and HadJets by cleaning the matching jet.
    bool hadJetID=true;
    int minDRindx=-100,phoMatchingJetIndx=-100,nHadJets=0;
    double minDR=99999,ST=0,remJetPt=0;
    vector<TLorentzVector> hadJets;

    for(int i=0;i<Jets->size();i++){
      if( ((*Jets)[i].Pt() > MHT_PtCut) && (abs((*Jets)[i].Eta()) <= MHT_EtaCut) ){
	double dR=bestPhoton.DeltaR((*Jets)[i]);
	if(dR<minDR){minDR=dR;minDRindx=i;}
      }
    }
    
    for(int i=0;i<Jets->size();i++){
      if( ((*Jets)[i].Pt() > MHT_PtCut) && (abs((*Jets)[i].Eta()) <= MHT_EtaCut) ){
	if( !(minDR < 0.3 && i==minDRindx) ){
	  hadJets.push_back((*Jets)[i]);
	  if(hadJetID) hadJetID=(*Jets_ID)[i];
	}
      }
    }
    if( minDR<0.3 ) phoMatchingJetIndx=minDRindx;
    for(int i=0;i<hadJets.size();i++){
      if( (abs(hadJets[i].Eta()) < HT_EtaCut) ){ST=ST+(hadJets[i].Pt());}
      if( (abs(hadJets[i].Eta()) < Njets_EtaCut) ){nHadJets++;}
    }
    if( minDR<0.3 ){
      ST=ST+bestPhoton.Pt();
    }
    sortTLorVec(&hadJets);
    
    //ST and HadJets have been determined. Now calulate dPhi b/w MET and leading HadJets.
    double dphi1=3.8,dphi2=3.8,dphi3=3.8,dphi4=3.8,dphiPho_MET=3.8;
    if(bestPhoton.Pt()>0.1) dphiPho_MET=abs(DeltaPhi(METPhi,bestPhoton.Phi()));
    if(hadJets.size() > 0 ) dphi1 = abs(DeltaPhi(METPhi,(hadJets)[0].Phi()));
    if(hadJets.size() > 1 ) dphi2 = abs(DeltaPhi(METPhi,(hadJets)[1].Phi()));
    if(hadJets.size() > 2 ) dphi3 = abs(DeltaPhi(METPhi,(hadJets)[2].Phi()));
    if(hadJets.size() > 3 ) dphi4 = abs(DeltaPhi(METPhi,(hadJets)[3].Phi()));
  
    //if(!(passPhoton165HE10Trigger || passPhoton135MET100Trigger)) continue;
    if( !((ST>800 && bestPhoton.Pt()>100) || (bestPhoton.Pt()>190)) ) continue;
    //apply baseline selections
    process = process && ST>500 && MET > 100 && nHadJets >=2 && dphi1 > 0.3 && dphi2 > 0.3 && bestPhoton.Pt() > 100;
    // process = process && ST>500 && MET > 100 && nHadJets ==4 && dphi1 > 0.3 && dphi2 > 0.3 && bestPhoton.Pt() > 100;
    //    process = process && ST>500 && MET > 100 && nHadJets >=2 && bestPhoton.Pt() > 100;
    if(process && hadJetID){
      evtSurvived++;
      h_RunNum->Fill(RunNum);
      h_intLumi->Fill(lumiInfb);
      //      print(jentry);
      h_ST->Fill(ST,wt);
      h_MET->Fill(MET,wt);
      h_nHadJets->Fill(nHadJets,wt);
      h_BTags->Fill(BTags,wt);
      h_HT->Fill(HT,wt);
      h_MHT->Fill(MHT,wt);
      h_nJets->Fill(NJets,wt);
      h_METvBin->Fill(MET,wt);
      h_nVtx->Fill(NVtx,wt);

      int nMuMultJ=0;
      for(int i=0;i<Jets->size();i++){
	if((*Jets)[i].Pt()>30.0){ nMuMultJ = nMuMultJ + (*Jets_muonMultiplicity)[i]; }
      }
      int searchRegion=0;
      if     (nHadJets >= 2 && nHadJets <= 4 ) searchRegion=1;
      else if(nHadJets == 5 || nHadJets == 6 ) searchRegion=2;
      else if(nHadJets >= 7                  ) searchRegion=3;
      
      //    if(Muons->size()==0){

      if(Muons->size()==1){
	double wt_org=wt;
	if(do_prediction){
	  double parX=ST,parY=MET;
	  double tf=0;
	  TString name;
	  if(nHadJets==2 || nHadJets==3)      name="LostProb_1";
	  else if(nHadJets==4)                name="LostProb_2";
	  else if(nHadJets==5 || nHadJets==6) name="LostProb_3";
	  else if(nHadJets>=7)                name="LostProb_4";
	  h2_LP=(TH2D*)f_LP->FindObjectAny(name);
	  if(h2_LP) tf=h2_LP->GetBinContent(h2_LP->FindBin(parX,parY));
	  else cout<<"hist not found"<<endl;
	  wt=tf*wt;
	}
	h_ST_Mu0->Fill(ST,wt);
	h_MET_Mu0->Fill(MET,wt);
	h_nHadJets_Mu0->Fill(nHadJets,wt);
	h_BTags_Mu0->Fill(BTags,wt);
	h_METvBin_Mu0->Fill(MET,wt);
	h_BestPhotonPt_Mu0->Fill(bestPhoton.Pt(),wt);
	h_BestPhotonEta_Mu0->Fill(bestPhoton.Eta(),wt);
	h_BestPhotonPhi_Mu0->Fill(bestPhoton.Phi(),wt);
	h_mTpho_Mu0->Fill(mt_pho,wt);

	h_isoMuonTracks_Mu0->Fill(isoMuonTracks,wt);
	h_MuMultInJets_Mu0->Fill(nMuMultJ,wt);
        h_invMassPhoMu->Fill((bestPhoton+(*Muons)[0]).M(),wt);

	h_dPhi_PhoMET_Mu0->Fill(dphiPho_MET,wt);
	h_dphi_METjet1_Mu0->Fill(dphi1,wt);
	h_dphi_METjet2_Mu0->Fill(dphi2,wt);

	h_Jet1Pt_Mu0->Fill(hadJets[0].Pt(),wt);
	h_Jet2Pt_Mu0->Fill(hadJets[1].Pt(),wt);
	h_isoEleTrack_Mu0->Fill(isoElectronTracks,wt);
	h_isoMuTrack_Mu0->Fill(isoMuonTracks,wt);
	h_isoPiTrack_Mu0->Fill(isoPionTracks,wt);

	h2_METnHadJ_Mu0->Fill(MET,nHadJets,wt);
	h2_dPhi1nHadJ_Mu0->Fill(dphi1,nHadJets,wt);
	h2_dPhi2nHadJ_Mu0->Fill(dphi2,nHadJets,wt);
	h2_dPhi1MET_Mu0->Fill(dphi1,MET,wt);
	h2_STMET_Mu0->Fill(ST,MET,wt);
	h2_dPhi1dPhi2_Mu0->Fill(dphi1,dphi2,wt);
	h2_STHadJ_Mu0->Fill(ST,nHadJets,wt);
	h2_METJet1Pt_Mu0->Fill(MET,hadJets[0].Pt(),wt);

	if(nHadJets<=3){
	  h2_STMET_2to3HadJ_Mu0->Fill(ST,MET,wt);
	  h2_STMET_2to3HadJ_Mu0_fb->Fill(ST,MET,wt);
	  for(int ri=0;ri<6;ri++){
	    h2_STMET_2to3HadJ_Mu0_R[ri]->Fill(ST,MET,wt);
	    h2_STMET_2to3HadJ_Mu0_R[ri]->ClearUnderflowAndOverflow();
	  }
	}
	if(nHadJets>=4){
	  h2_STMET_min4HadJ_Mu0->Fill(ST,MET,wt);
	}
	h3_STMETnHadJ_Mu0->Fill(ST,MET,nHadJets,wt);
	h2_hadJbTag_Mu0->Fill(nHadJets,BTags,wt);

	//	if(ST>5000 || MET>5000) cout<<"ST "<<ST<<" MET "<<MET<<endl;
	if(nHadJets==2 || nHadJets==3)      h2_STMET_NJ2or3_Mu0  ->Fill(ST,MET,wt);
	else if(nHadJets==4)                h2_STMET_NJ4_Mu0     ->Fill(ST,MET,wt);
	else if(nHadJets==5 || nHadJets==6) h2_STMET_NJ5or6_Mu0  ->Fill(ST,MET,wt);
	else if(nHadJets>=7)                h2_STMET_NJ7toInf_Mu0->Fill(ST,MET,wt);
	//---------------- search bins -----------------------
	if( searchRegion > 0 && searchRegion < 4){
	  h_MET_Mu0_R[searchRegion-1]->Fill(MET,wt);
	}
	else cout<<"Event outside search region! ";
	//h_*Mu0 histograms contain prediction from 1Mu+G CS. Next fill h_*Mu1 histograms with 1Mu+G CS events.
	wt=wt_org;
	h_ST_Mu1->Fill(ST,wt);
	h_MET_Mu1->Fill(MET,wt);
	h_nHadJets_Mu1->Fill(nHadJets,wt);
	h_BTags_Mu1->Fill(BTags,wt);
	h_METvBin_Mu1->Fill(MET,wt);
	h_BestPhotonPt_Mu1->Fill(bestPhoton.Pt(),wt);
	h_BestPhotonEta_Mu1->Fill(bestPhoton.Eta(),wt);
	h_BestPhotonPhi_Mu1->Fill(bestPhoton.Phi(),wt);
	h_mTpho_Mu1->Fill(mt_pho,wt);

	h_isoMuonTracks_Mu1->Fill(isoMuonTracks,wt);
	h_MuMultInJets_Mu1->Fill(nMuMultJ,wt);

	h_MuPt->Fill((*Muons)[0].Pt(),wt);
	h_MuEta->Fill((*Muons)[0].Eta(),wt);
	h_MuPhi->Fill((*Muons)[0].Phi(),wt);
	h_mTmu->Fill(mt_mu,wt);

	h_dPhi_PhoMET_Mu1->Fill(dphiPho_MET,wt);
	h_dphi_METjet1_Mu1->Fill(dphi1,wt);
	h_dphi_METjet2_Mu1->Fill(dphi2,wt);
	h_dPhi_Muon_Photon->Fill(abs(bestPhoton.DeltaPhi((*Muons)[0])),wt);

	h_Jet1Pt_Mu1->Fill(hadJets[0].Pt(),wt);	
	h_Jet2Pt_Mu1->Fill(hadJets[1].Pt(),wt);	
	h_isoEleTrack_Mu1->Fill(isoElectronTracks,wt);
	h_isoMuTrack_Mu1->Fill(isoMuonTracks,wt);
	h_isoPiTrack_Mu1->Fill(isoPionTracks,wt);


	h2_STvsMuPt_Mu1->Fill((*Muons)[0].Pt(),ST,wt);
	h2_METvsMuPt_Mu1->Fill((*Muons)[0].Pt(),MET,wt);

	h2_METnHadJ_Mu1->Fill(MET,nHadJets,wt);
	h2_dPhi1nHadJ_Mu1->Fill(dphi1,nHadJets,wt);
	h2_dPhi2nHadJ_Mu1->Fill(dphi2,nHadJets,wt);
	h2_dPhi1MET_Mu1->Fill(dphi1,MET,wt);
	h2_STMET_Mu1->Fill(ST,MET,wt);
	h2_dPhi1dPhi2_Mu1->Fill(dphi1,dphi2,wt);
	h2_STHadJ_Mu1->Fill(ST,nHadJets,wt);
	h2_METJet1Pt_Mu1->Fill(MET,hadJets[0].Pt(),wt);
	h2_RecoMuPtRecoAct_Mu1->Fill((*Muons)[0].Pt(),(*Muons_MT2Activity)[0],wt);

	if(nHadJets<=3){
	  h2_STMET_2to3HadJ_Mu1->Fill(ST,MET,wt);
	  h2_STMET_2to3HadJ_Mu1_fb->Fill(ST,MET,wt);
	  for(int ri=0;ri<6;ri++){
	    h2_STMET_2to3HadJ_Mu1_R[ri]->Fill(ST,MET,wt);
	    h2_STMET_2to3HadJ_Mu1_R[ri]->ClearUnderflowAndOverflow();
	  }
	}
	if(nHadJets>=4){
	  h2_STMET_min4HadJ_Mu1->Fill(ST,MET,wt);
	}
	h3_STMETnHadJ_Mu1->Fill(ST,MET,nHadJets,wt);
	
	h2_hadJbTag_Mu1->Fill(nHadJets,BTags,wt);
	if(nHadJets==2 || nHadJets==3)      h2_STMET_NJ2or3_Mu1  ->Fill(ST,MET,wt);
	else if(nHadJets==4)                h2_STMET_NJ4_Mu1     ->Fill(ST,MET,wt);
	else if(nHadJets==5 || nHadJets==6) h2_STMET_NJ5or6_Mu1  ->Fill(ST,MET,wt);
	else if(nHadJets>=7)                h2_STMET_NJ7toInf_Mu1->Fill(ST,MET,wt);
	//---------------- search bins -----------------------
	if( searchRegion > 0 && searchRegion < 4){
	  h_MET_Mu1_R[searchRegion-1]->Fill(MET,wt);
	}
	else cout<<"Event outside search region! "<<searchRegion;
	wt=wt_org;
	//	if(!nMuMultJ) print(jentry);
      }//muon + photon events
    }
  } // loop over entries
  cout<<"Events Survied:"<<evtSurvived<<endl;
}


TLorentzVector LostMuon::getBestPhoton(){
  // bool passIDVeryLoose=false,passIDLoose=false,passIsoVeryLoose=false,passIsoLoose=false;
  vector<TLorentzVector> goodPho;
  vector<int> goodPhoIndx;

  for(int iPho=0;iPho<Photons->size();iPho++){
    if( ((*Photons_fullID)[iPho]) && ((*Photons_hasPixelSeed)[iPho]<0.001) ) {
      goodPho.push_back( (*Photons)[iPho] );
      goodPhoIndx.push_back(iPho);
    }
  }
  int highPtIndx=-100;
  for(int i=0;i<goodPho.size();i++){
    if(i==0) highPtIndx=0;
    else if( (goodPho[highPtIndx].Pt()) < (goodPho[i].Pt()) ){highPtIndx=i;}
  }

  if(highPtIndx>=0){
    bestPhotonIndxAmongPhotons = goodPhoIndx[highPtIndx];
    return goodPho[highPtIndx];
  }
  else{
    bestPhotonIndxAmongPhotons = -100;
    TLorentzVector v0;return v0;
  }
}


bool LostMuon::check_eMatchedtoGamma(){
  if(bestPhotonIndxAmongPhotons>=0){
    for(int i=0;i<Electrons->size();i++){
      if( (*Photons)[bestPhotonIndxAmongPhotons].DeltaR( (*Electrons)[i] ) < 0.1){
	//	cout<<(*Electrons)[i].Pt()<<" "<<(*Electrons)[i].Eta()<<" "<<(*Electrons)[i].Phi()<<" "<<(*Photons)[bestPhotonIndxAmongPhotons].Pt()<<" "<<(*Photons)[bestPhotonIndxAmongPhotons].Eta()<<" "<<(*Photons)[bestPhotonIndxAmongPhotons].Phi()<<" dR:"<<(*Photons)[bestPhotonIndxAmongPhotons].DeltaR( (*Electrons)[i])<<endl;
	return true;
      }
    }
  }
  else
    return false;
}

void  LostMuon::findObjMatchedtoG(TLorentzVector bestPhoton){
  /*
  double dR=100;
  int match=-100;
  for(int i=0;i<GenParticles->size();i++){
    if((*GenParticles)[i].Pt()!=0){
      if(i==0){dR=DeltaR( bestPhoton.Eta(),bestPhoton.Phi(),(*GenParticles)[i].Eta(),(*GenParticles)[i].Phi() );}
      else if(dR > (DeltaR( bestPhoton.Eta(),bestPhoton.Phi(),(*GenParticles)[i].Eta(),(*GenParticles)[i].Phi())) ){
	dR=(DeltaR( bestPhoton.Eta(),bestPhoton.Phi(),(*GenParticles)[i].Eta(),(*GenParticles)[i].Phi()));
	match=i;
      }
    }
  }
  //cout<<"Pt: "<<bestPhoton.Pt()<<" Eta:"<<bestPhoton.Eta()<<" Phi:"<<bestPhoton.Phi()<<" PdgID:"<<(*GenParticles_PdgId)[match]<<" Pt:"<<(*GenParticles)[match].Pt()<<" Eta:"<<(*GenParticles)[match].Eta()<<" Phi:"<<(*GenParticles)[match].Phi()<<" parentId:"<<(*GenParticles_ParentId)[match]<<endl;
  if(dR<0.1){
    h_GmatchedObj->Fill(abs((*GenParticles_PdgId)[match]),wt);
    if(abs((*GenParticles_PdgId)[match])==22)  h_PdgIdPhoParent->Fill(abs((*GenParticles_ParentId)[match]),wt);
  }
  else{
    h_GmatchedObj->Fill(0.0,wt);
    h_PdgIdPhoParent->Fill(0.0,wt);
  }
  //find obj matched to muon
  dR=100;match=-100;
  if(Muons->size()==1){
    for(int i=0;i<GenParticles->size();i++){
      if((*GenParticles)[i].Pt()!=0){
	if(i==0){dR=(*GenParticles)[i].DeltaR((*Muons)[0]);}
	else if(dR > ((*GenParticles)[i].DeltaR( (*Muons)[0]) ) ){
	  dR= (*GenParticles)[i].DeltaR((*Muons)[0]);
	  match=i;
	}
      }
    }
    if(dR<0.1){
      h_MuMatchedObj->Fill(abs((*GenParticles_PdgId)[match]),wt);
      if(abs((*GenParticles_PdgId)[match])==13){
	h_PdgIdMuParent->Fill(abs((*GenParticles_ParentId)[match]),wt);
	// if(abs((*GenParticles_ParentId)[match])!=24 && abs((*GenParticles_ParentId)[match])!=15){
	//   print(0);
	//   cout<<(*GenParticles_PdgId)[match]<<" Mu Pt: "<<(*Muons)[0].Pt()<<" eta: "<<(*Muons)[0].Eta()<<" phi: "<<(*Muons)[0].Phi()<<endl<<abs((*GenParticles_ParentId)[match])<<endl;
	//	}
      }
    }
    else{
      h_MuMatchedObj->Fill(0.0,wt);
      h_PdgIdMuParent->Fill(0.0,wt);
    }
  }
*/
}



void LostMuon::print(Long64_t jentry){
  //cout<<endl;
  TLorentzVector v1,photo;
  /*  for(int i=0;i<GenParticles->size();i++){
    // cout<<EvtNum<<" "<<jentry<<" "<<GenParticles->size()<<" "<<i<<" parentId:"<<(*GenParticles_ParentId)[i]<<" parentIndx:"<<(*GenParticles_ParentIdx)[i]<<" PdgId:"<<(*GenParticles_PdgId)[i]<<" Status:"<<(*GenParticles_Status)[i]<<"\tPx:"<<(*GenParticles)[i].Px()<<" Py:"<<(*GenParticles)[i].Py()<<" Pz:"<<(*GenParticles)[i].Pz()<<" E:"<<(*GenParticles)[i].Energy()<<endl;
    cout<<EvtNum<<" "<<jentry<<" "<<GenParticles->size()<<" "<<i<<" PdgId:"<<(*GenParticles_PdgId)[i]<<" parentId:"<<(*GenParticles_ParentId)[i]<<" parentIndx:"<<(*GenParticles_ParentIdx)[i]<<" Status:"<<(*GenParticles_Status)[i]<<"\tPx:"<<(*GenParticles)[i].Px()<<" Py:"<<(*GenParticles)[i].Py()<<" Pz:"<<(*GenParticles)[i].Pz()<<"\tPt:"<<(*GenParticles)[i].Pt()<<" Eta:"<<(*GenParticles)[i].Eta()<<" Phi:"<<(*GenParticles)[i].Phi()<<" E:"<<(*GenParticles)[i].Energy()<<endl;
  }
*/
  for(int i=0;i<Photons->size();i++){
    double dR=0;//DeltaR( bestPhoton.Eta(),bestPhoton.Phi(),(*Photons)[i].Eta(),(*Photons)[i].Phi() );
    //cout<<jentry<<" i:"<<i<<" phoSize:"<<Photons->size()<<" Pt:"<<bestPhoton.Pt()<<" eta:"<<bestPhoton.Eta()<<" phi:"<<bestPhoton.Phi()<<" otherP:"<<(*Photons)[i].Pt()<<" eta:"<<(*Photons)[i].Eta()<<" phi:"<<(*Photons)[i].Phi()<<" dR:"<<dR<<endl;
  }
  for(int i=0;i<Jets->size();i++){
    //  if( ((*Jets)[i].Pt() > MHT_PtCut) && (abs((*Jets)[i].Eta()) <= MHT_EtaCut) ){
    if(1){
      cout<<"JetPt:"<<(*Jets)[i].Pt()<<" JetEta:"<<(*Jets)[i].Eta()<<" JetPhi:"<<(*Jets)[i].Phi()<<endl;
    }
  }

  for(int i=0;i<Muons->size();i++){
    if(i==0) cout<<"-------------------------------- Muons -------------------------------------------"<<endl;
    cout<<"MuonPt: "<<(*Muons)[i].Pt()<<" Eta: "<<(*Muons)[i].Eta()<<" Phi: "<<(*Muons)[i].Phi()<<" M: "<<(*Muons)[i].M()<<endl;
  }
  cout<<"^^^^^^^^^^^^^^^^^^ Event ends ^^^^^^^^^^^^^^^^^^^^^^^^^^^"<<endl;
}
